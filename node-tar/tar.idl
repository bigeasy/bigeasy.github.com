# Node Tar

Evented reading and writing of tar format archives.

## Synopsis

The `Parser` class is a `WritableStream`. It emits `"entry"` events that provide
the tar entry header and a `ReadableStream` of the `"entry"` contents.

The `Parser` is an incremental parser. It emits `"entry"` events the moment the
headers are read from the stream and begins to stream contents immediately.

```javascript
var tar = require("tar"),
    fs  = require("fs");

/* Pluck a file from a tarball and write to stdout. */
function cat(tarfile, filename) {
  var reader = new tar.Parser();
  reader.on("entry", function (header, stream) {
    if (filename == header.name) {
      stream.pipe(process.stdout);
    }
  });
  readable = fs.createReadStream(tarfile);
  readable.pipe(reader);
}

cat("hello.tar", "hello/hello.txt");
```

The 'Serializer` class is a `ReadableStream`. You create entires by calling the
`entry` method and providing a header definition. The `entry` method returns a
`WritableStream`.

```javascript
var tar = require("tar"),
    fs  = require("fs");

/* Write the files to the tar serializer. */
function store(serializer, files) {
  if (files.length) {
    file = files.shift();
    source = fs.createReadStream(file); 
    source.pipe(serializer.entry({ name: file }));
    source.on("end", function () {
      store(serializer, file);
    });
  } else {
    serializer.end();
  }
}

var serializer = new tar.Serializer();
serializer.pipe(fs.createWriteStream(tarfile));
store(serializer, [ "README", "LICENSE", "hello_world.c" ]);
```

## Objectives

Create an incremental tar file parser with a streaming interface supporting as
many tar file formats as I can get my hands on. (Please submit a tar file
generated by your flavor or UNIX for testing.)

The `node-tar` parser and serializer are idomatic Node.js `EventEmitter`
classes. The library is remarkable for the following traits.

 * **Incremental parser** &ndash; The incremental parser emits `"entry"` events
  the moment the headers are completed and begins to stream contents immediately.
 * **Streamable parser** &ndash; The `Parser` implements `WritableStream` so you
   can pipe a `ReadableStream` into it for parsing.
 * **Streamable parsed entries** &ndash; Each `"entry"` event presents the
   contents of the entry as a `WriteableStream` so you can pipe it to a
   `WritableStream` destination.
 * **Streamable serializer** &ndash; The `Serializer` implements
   `ReadableStream` so you can pipe its output to a `WritableStream`
   destination.
 * **Streamable serialized entries** &ndash; The `Serializer` entries implement
   `WriteableStream` so you can pipe entry content into the output archive.

The `node-tar` library aims to support idomatic Node.js programming.

@ tar

Node Tar exports the parser and serializer classes in its exports.

```javascript
var tar = require("tar");
```

~ new Parser()

The `Parser` class consumes buffers and emits `"entry"` events. An `"entry"`
event provides the entry header and a `ReadableStream` that serves the contents.

`Parser` is a `WritableStream` so you can pipe a `ReadableStream` into as shown
in the [Synopsis](#Synopis), or you can feed it buffers directly.

Below is the example from the sysopsis where the entry stream is processed by
user supplied event handlers.

```javascript
var tar = require("tar"),
    fs  = require("fs");

/* Pluck a file from a tarball and write to stdout. */
function cat(tarfile, filename) {
  var parser = new tar.Parser();
  parser.on("entry", function (header, stream) {
    if (filename == header.name) {
      stream.pipe(process.stdout);
    }
  });
  count = 0;
  readable = fs.createReadStream(tarfile);
  /* Handle the `ReadableStream` events ourselves. */
  readable.on("data", function (buffer) {
    count += buffer.length; 
    parser.write(buffer);
  });
  readable.on("end", function () {
    process.stderr.write("The tar file was #{count} bytes long.");
  });
}

cat("hello.tar", "hello/hello.txt");
```

`Parser` implements all of the functions and events of  the `WritableStream`
interface. The `WritablStream` interface is a staple of Node.js programming, so
a description of how they work will not be repeated here.  Refer to the
[`WritableStream`](http://nodejs.org/docs/v0.4.6/api/streams.html#writable_Stream)
documentation for details of `WritableStream` usage.

~ on("entry", header, stream)

  ~ header - The fields of the tar entry header.
  ~ stream - A readable stream of the tar entry contents

An object containing the tar header. **Show the fields.**

Emitted when after a header is encontered in the tar acrhive an prior to
streaming the file contents.

The `header` is an object containing the header as name value pairs.

The `stream` is a `ReadableStream` that provides the entry contents. You can
pipe the stream to a `WritableStream` destination, or you can handle the stream
events direction.

Below is the example from the sysopsis where the entry stream is processed by
user supplied event handlers.

```javascript
var tar = require("tar"),
    fs  = require("fs");

/* Pluck a file from a tarball and write to stdout. */
function cat(tarfile, filename) {
  var reader = new tar.Parser();
  reader.on("entry", function (header, stream) {
    if (filename == header.name) {
      count = 0;
      stream.on("data", function (chunk) {
        count += chunk.length;
        process.stdout.write(chunk);
      });
      stream.on("end", function() {
        process.stderr.write( 
          "Streamed " + count + " byte(s) of entry " + filename + "."
        );
      });
    }
  });
  readable = fs.createReadStream(tarfile);
  readable.pipe(reader);
}

cat("hello.tar", "hello/hello.txt");
```

The stream provided by the `"entry"` event implements all the functions and
events of the `ReadableStream` interface. The `ReadableStream` interface is a
staple of Node.js programming, so a description of how they work will not be
repeated here.  Refer to the
[`ReadableStream`](http://nodejs.org/docs/v0.4.6/api/streams.html#readable_Stream)
documentation for details of `ReadableStream` usage.

~ on("end")

Called when the end of the tar archive is reached.

~ new Serializer()

The `Serializer` is essentially a `WritableStream` factory, creating
`WritableStream` instances used to write tar file entires.

~ entry(filename)

  ~ filename - A file to stream into the tar file.

Returns a `WritableStream` used to write the given filename. The header
properties are read by stating the file. 

~ entry(filename, callback)

  ~ filename - A file to stream into the tar file.
  ~ callback - Invoked when the file is written.

Writes the given file into the tar archive and invokes the callback when
completed.

~ entry(filename, header)

  ~ filename - A file name for the tar entry.
  ~ header - Header properties for the tar entry.

Creates `WritableStream` used to write contents into an entry with the given
`filename`. The header properties are used to create the entry. The `size` must
be provided and it must reflect the actual bytes written to the stream.
